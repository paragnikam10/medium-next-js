// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider           = "postgresql"
  url                = env("DATABASE_URL")
  shadowDatabaseUrl  = env("SHADOW_DATABASE_URL")
}

model User {
  id                String    @id  @default(cuid())
  password          String?
  profileImage      String?   @default("https://www.shutterstock.com/image-vector/user-profile-icon-vector-avatar-600nw-2247726673.jpg")
  email             String?   @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  token             String? 
  accounts          Account[]
  sessions          Session[]
  blogs             Blog[]
  comments          Comment[]
  likes             Like[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
} 

model Account {
  id                String    @id  @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User      @relation(fields:[userId], references: [id], onDelete : Cascade) 

  @@unique([provider, providerAccountId])
}

model Session {
  id                String    @id  @default(cuid())
  sessionToken      String    @unique
  userId            String
  expires           DateTime
  user              User      @relation(fields:[userId], references:[id], onDelete : Cascade) 
}

model VerificationToken {
  identifier        String
  token             String    @unique
  expires           DateTime

  @@unique([identifier, token])
}

model Blog {
  id                String    @id  @default(cuid())
  title             String 
  content           String
  excerpt           String?
  authorId          String
  author            User      @relation(fields : [authorId], references :[id])
  authorName        String    @default("Unknown")
  tags              Tag[]     @relation("BlogTags")  
  likes             Like[]
  comments          Comment[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
}

model Comment {
  id                String    @id  @default(cuid())
  content           String
  blogId            String
  blog              Blog      @relation(fields:[blogId], references:[id])
  authorId          String
  author            User      @relation(fields:[authorId], references:[id])

  createdAt         DateTime  @default(now())
}

model Like {
  id                String    @id  @default(cuid())
  blogId            String
  blog              Blog      @relation(fields:[blogId], references:[id])
  userId            String
  user              User      @relation(fields:[userId], references:[id])

  createdAt         DateTime  @default(now())
}

model Tag {
  id                String    @id  @default(cuid())
  name              String    @unique
  blogs             Blog[]    @relation("BlogTags")

  createdAt         DateTime  @default(now())
}